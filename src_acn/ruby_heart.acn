// Actinon source code

/* Copyright 2018 Johannes Bernhard Steffens
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* This script file represents a small program in Actinon-script.
 * For more detailed inline commenting of the code see also wine_glass.acn.
 */
<mclosure_s></>

def scene = scene_s;

scene.image_width         = 600;
scene.image_height        = 400;
scene.gamma               = 0.9;

scene.gradient_cycles     = 100;
scene.gradient_samples    = 2;
scene.gradient_threshold  = 0.03;

scene.trace_depth         = 25;
scene.trace_min_intensity = 0.02;
scene.direct_samples      = 100;
scene.path_samples        = 100;
scene.max_path_length     = 4;

def camera_position = vec( 0, -16, 8 );

scene.camera_position       = camera_position;
scene.camera_view_direction = vec( 0, 0, -0.5 ) - camera_position;
scene.camera_top_direction  = vec( 0, 0, 1 );
scene.camera_focal_length   = 5;
scene.background_color = color( 0.5, 0.4, 0.2 );

def create_lights = 
{
    def base_light = create_sphere( 1 );
    base_light.scale( 1 );
    base_light.set_radiance( 25 );
    base_light.set_color( color( 1.0, 1.0, 1.0 ) );
    def lights = [];
    lights.push( base_light );
    lights.move( vecx( -8 ) );
    lights.push( base_light );
    lights.move( vecx( 4 ) );
    lights.move( vecz( 6 ) );
    lights;
};

def create_floor =
{
    def plane = create_plane();
    plane.set_material( "diffuse_polished" );
    plane.set_color( color( 0.2, 0.3, 0.5 ) );
    plane.move( vec( 0, 0, -1 ) );
    plane;
};

def create_plate = <-( num floor_offs, num radius, num height ) *
{
    def cloth_height = 0.05;
    def cover = create_plane();
    def cone = create_cone( 1, 1, 1 );
    def cyl = create_cylinder( 1, 1 );

    def plate = cone & ( cover - vecz( radius + cloth_height ) ) & !( cover - vecz( radius + height ) );
    plate.move( vecz( floor_offs + radius + height ) );

    def lst = [];
    lst.push( cover );
    lst.push( cyl * radius * 0.8 );

    def cloth = lst.create_inside_composite();
    cloth.move( vecz( floor_offs + height ) );
    cloth.set_material( "diffuse" );
    cloth.set_color( color( 0.7, 0.8, 0.9 ) );
    plate.set_material( "diffuse_polished" );
    plate.set_color( color( 0.25, 0.15, 0.1 ) );

    plate : cloth;
};

def create_heart = <-( num floor_offs ) *
{
    def ball_radius = 0.3;
    def ball0 = create_sphere( 1 );
    ball0.scale( ball_radius );
    ball0.set_material ( "sapphire" );
    ball0.set_transparency( color( 1.0, 0.031, 0.01 ) );

    def bline = [];
    def balls_in_line = 8;
    def line_length = 3.5;
    def balls_step = line_length / ( balls_in_line - 1 );
    def i = 0;
    while( i < balls_in_line )
    {
        bline.push( ball0 );
        bline.move( vecx( balls_step ) );        
        i += 1;
    } ();
    def lline = bline;
    lline.rotate( rotz( 90 + 41  ) );
    def rline = bline;
    rline.rotate( rotz( 90 - 41 ) );

    def heart = [];
    heart.push( lline );
    heart.push( rline );
    heart.push( ball0 );
    heart.move( vecy( -line_length * 1.25 ) );

    def balls_in_arc = 8;
    def balls_angle_step = 180 / ( balls_in_arc - 1 );
    def balls_arc_radius = 1.4;
    def lbarc = [];
    def rbarc = [];
    def lball1 = ball0;
    lball1.move( vecx(  balls_arc_radius ) );
    def rball1 = ball0;
    rball1.move( vecx( -balls_arc_radius ) );
    i = 0;
    while( i < balls_in_arc )
    {
        lbarc.push( lball1 );
        lbarc.rotate( rotz( balls_angle_step ) );
        rbarc.push( rball1 );
        rbarc.rotate( rotz( -balls_angle_step ) );
        i += 1;
    } ();

    lbarc.move( vecx( -balls_arc_radius - ball_radius ) );
    rbarc.move( vecx(  balls_arc_radius + ball_radius ) );
    def barcs = [];
    barcs.push( lbarc );
    barcs.push( rbarc );
    barcs.push( ball0 + vecy( ball_radius * 0.7 ) );
    barcs.move( vecy( -0.2 ) );
    heart.push( barcs );
    heart.move( vecy( 2.5 ) + vecz( floor_offs + ball_radius ) );

    heart;
};

{
    scene.clear();
    scene.push( create_lights() );
    scene.push( create_floor() );

    def plate_height = 0.4;
    scene.push( create_plate( -1, 5, plate_height ) + vecy( 1.5 ) );
    scene.push( create_heart( -1 + plate_height ) );

    // some extra pearls
    def ball_radius = 0.3;
    def ball = create_sphere( 1 );
    ball.scale( ball_radius );
    ball.set_material ( "sapphire" );
    ball.set_transparency( color( 1.0, 0.031, 0.01 ) );
    scene.push( ball + vec( 0.3, 0.2, -1 + plate_height + ball_radius ) );
    scene.push( ball + vec( -0.5, 0.8, -1 + plate_height + ball_radius ) );
    scene.push( ball + vec( -4.1, 0.2, -1 + plate_height + ball_radius - 0.05 ) );
    scene.push( ball + vec( -2.7, -1,  -1 + plate_height + ball_radius - 0.05 ) );
    scene.push( ball + vec( 5.5, 2.5,  -1 + ball_radius ) );
    scene.push( ball + vec(  3, -4,  -1 + ball_radius ) );


    def file_name = #source_file_name + ".pnm";
    scene.create_image( file_name );
}();


