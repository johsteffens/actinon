// Actinon-script

/* Copyright 2018 Johannes Bernhard Steffens
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* This script file represents a small program in Actinon-script.
 * For more detailed inline commenting of the code see also wine_glass.acn.
 */
<mclosure_s></>

def scene = scene_s;

scene.image_width         = 400;
scene.image_height        = 400;
scene.gamma               = 0.7;

scene.gradient_cycles     = 25;
scene.gradient_samples    = 2;
scene.gradient_threshold  = 0.03;

scene.trace_depth         = 25;
scene.trace_min_intensity = 0.02;
scene.direct_samples      = 100;
scene.path_samples        = 100;
scene.max_path_length     = 1.5;

def camera_position = vec( 0, -10, 4 );

scene.camera_position       = camera_position;
scene.camera_view_direction = vec( 0, 0, 0 ) - camera_position;
scene.camera_top_direction  = vec( 0, 0, 1 );
scene.camera_focal_length   = 4;
scene.background_color = color( 0.2, 0.1, 0.05 );

def create_lights = 
{
    def base_light = obj_sphere_s;
    base_light.scale( 0.5 );
    base_light.set_radiance( 30 );
    base_light.set_color( color( 1.0, 1.0, 1.0 ) );
    ( base_light + vec( -4, -2, 3 ) );
};

def create_floor =
{
    def plane = obj_plane_s;
    plane.set_material( "diffuse" );
    plane.set_color( color( 0.6, 0.7, 0.8 ) );
    plane.move( vec( 0, 0, -1 ) );
    plane;
};

def create_matter = 
{
    def sph = obj_sphere_s;
    def cov = obj_plane_s;

    def radius = 0.6;

    def ball = sph * radius;

    ball.set_material( "glass" );

    def box_list = [];
    box_list.push( ( cov * roty(   0 ) ) + vecz( radius * 3 ) );
    box_list.push( ( cov * roty( 180 ) ) - vecz( radius ) );
    box_list.push( ( cov * roty(  90 ) ) + vecx( radius * 0.1 ) );
    box_list.push( ( cov * roty( -90 ) )                      );
    box_list.push( ( cov * rotx(  90 ) ) - vecy( radius * 2 ) );
    box_list.push( ( cov * rotx( -90 ) ) + vecy( radius * 2 ) );

    def box = box_list.compose_inside();
    box.set_material( "diffuse" );
    box.set_color( color( 0.9, 0.6, 0.5 ) );

    box.move( vecz( radius - 1.0 ) );
    ball.move( vecz( radius - 1.0 ) );

    def objects = [];
    objects.push( ball );
    objects.move( -vecx( radius ) );
    objects.push( box + vecz( radius * 0.5 ) );
    objects.move( -vecx( 0.1 + radius ) );
    objects.push( ball );
    objects.move( -vecx( radius ) );
    objects.push( box );

    objects.move( vecx( radius * 2 ) );


    objects.rotate( rotz( 20 ) );

    objects;
};

{
    scene.clear();
    scene.push( create_lights() );
    scene.push( create_floor() );
    scene.push( create_matter() );
    def file_name = #source_file_name + ".pnm";
    scene.create_image( file_name );
}();


