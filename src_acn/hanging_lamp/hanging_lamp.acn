// Actinon source code

/* Copyright 2018 Johannes Bernhard Steffens
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<mclosure_s></>

// set 'true' during drafting for quick results
def draft = false;

def scene = scene_s;
scene.threads = 10;

scene.image_width         = 600;
scene.image_height        = 800;
scene.gamma               = 0.7;

scene.gradient_cycles     = { if( draft ) 0 else 50; }();

scene.gradient_samples    = 2;
scene.gradient_threshold  = 0.03;

scene.trace_depth         = 25;
scene.trace_min_intensity = 0.03;
scene.direct_samples      = { if( draft ) 10 else 30; }();
scene.path_samples        = { if( draft )  0 else 30; }();
scene.max_path_length     = 3;

def camera_position = vec( 0, -10, -2 );

scene.camera_position       = camera_position;
scene.camera_view_direction = vec( 0, 0, 0 ) - camera_position;
scene.camera_top_direction  = vec( 0, 0, 1 );
scene.camera_focal_length   = 4;
scene.background_color = color( 0.5, 0.5, 0.5 );

def create_light = <-( lamp_radius, radiance ) *
{
    def sph = obj_sphere_s;
    def light = sph * lamp_radius;
    light.set_radiance( radiance );
    light;
};

def create_floor = <-( num zoffs ) *
{
    def plane = create_plane();
    plane.set_material( "diffuse" );
    plane.set_color( color( 0.6, 0.4, 0.2 ) );
    plane.set_refractive_index( 1.2 );
    plane.move( vec( 0, 0, zoffs ) );
    plane;
};

def create_ceiling = <-( num zoffs ) *
{
    def plane = create_plane() * rotx( 180 );
    plane.set_material( "diffuse" );
    plane.set_color( color( 0.8, 0.8, 0.8 ) );
    plane.move( vec( 0, 0, zoffs ) );
    plane;
};

{
    scene.clear();
    scene.push( create_light( 0.5, 35 ) + vec( -3, -3, 0 ) );

    def floor_offset = -3;
    def ceiling_offset = 2.5;
    scene.push( create_floor( floor_offset ) );
    scene.push( create_ceiling( ceiling_offset ) );
    
    def Shade   = { #parse "shade.acn" }();
    def Stand   = { #parse "stand.acn" }();
    def OilLamp = { #parse "oil_lamp.acn" }();
    def Parts   = { #parse "parts.acn" }();
    
    def stand    = Stand.create();
    def shade    = Shade.create();
    def oil_lamp = OilLamp.create();
    
    shade.obj.move( vecz( -shade.zmin ) );
    shade.obj *= stand.screw_radius / shade.screw_radius;
    
    shade.obj.move( vecz( stand.plateau ) );
    
    oil_lamp.obj.move( vecz( -oil_lamp.mount_point ) );
    oil_lamp.obj *= 0.3;
    oil_lamp.obj.move( stand.lamp_mount_point );

    def lamp = [];
    
    lamp.push( shade.obj );
    lamp.push( stand.obj );
    lamp.push( oil_lamp.obj );
    
    lamp.move( vecz( ceiling_offset - stand.zmax ) );
    
    
    
    
    lamp;        
    scene.push( lamp * rotz( 20 ) );

    def file_name = #source_file_name + ".pnm";
    scene.create_image( file_name );
}();


